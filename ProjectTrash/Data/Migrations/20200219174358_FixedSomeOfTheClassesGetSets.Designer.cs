// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTrash.Data;

namespace ProjectTrash.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200219174358_FixedSomeOfTheClassesGetSets")]
    partial class FixedSomeOfTheClassesGetSets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "92deba22-6d37-4747-bc6c-53510dcb1694",
                            ConcurrencyStamp = "d3ff1369-eaec-4a2a-9106-f1f4aab25c33",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "a688b36d-59cb-43f4-b504-bd049b97f7b1",
                            ConcurrencyStamp = "ecd5e6dd-606b-4097-850c-6700afc0aba4",
                            Name = "Employee",
                            NormalizedName = "Employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectTrash.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountSubscriptionID")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyPickUpID")
                        .HasColumnType("int");

                    b.Property<double>("balance")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("AccountSubscriptionID");

                    b.HasIndex("AddressID");

                    b.HasIndex("WeeklyPickUpID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountSubscriptionID = 1,
                            AddressID = 1,
                            WeeklyPickUpID = 3,
                            balance = 25.0
                        },
                        new
                        {
                            ID = 2,
                            AccountSubscriptionID = 2,
                            AddressID = 2,
                            WeeklyPickUpID = 4,
                            balance = 50.0
                        },
                        new
                        {
                            ID = 3,
                            AccountSubscriptionID = 3,
                            AddressID = 3,
                            WeeklyPickUpID = 5,
                            balance = 25.0
                        },
                        new
                        {
                            ID = 4,
                            AccountSubscriptionID = 4,
                            AddressID = 4,
                            WeeklyPickUpID = 6,
                            balance = 50.0
                        },
                        new
                        {
                            ID = 5,
                            AccountSubscriptionID = 5,
                            AddressID = 5,
                            WeeklyPickUpID = 1,
                            balance = 0.0
                        },
                        new
                        {
                            ID = 6,
                            AccountSubscriptionID = 6,
                            AddressID = 6,
                            WeeklyPickUpID = 1,
                            balance = 33.0
                        },
                        new
                        {
                            ID = 7,
                            AccountSubscriptionID = 7,
                            AddressID = 7,
                            WeeklyPickUpID = 2,
                            balance = 150.0
                        },
                        new
                        {
                            ID = 8,
                            AccountSubscriptionID = 8,
                            AddressID = 2,
                            WeeklyPickUpID = 1,
                            balance = 20.0
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.AccountSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("accountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("accountStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isSuspended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("suspensionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("suspensionStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            accountEndDate = new DateTime(2016, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2008, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2016, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = true,
                            suspensionEndDate = new DateTime(2020, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2018, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(2019, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            accountEndDate = new DateTime(2016, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2008, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2018, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(2019, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2018, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipCode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            address = "14538 Talbot drive",
                            city = "Warren",
                            state = "Mi",
                            zipCode = 48088
                        },
                        new
                        {
                            ID = 2,
                            address = "6228 238th Avenue",
                            city = "Salem",
                            state = "Wi",
                            zipCode = 53168
                        },
                        new
                        {
                            ID = 3,
                            address = "6118 North Downer Avenue",
                            city = "Milwaukee",
                            state = "Wi",
                            zipCode = 53211
                        },
                        new
                        {
                            ID = 4,
                            address = "2438 North Bremen Street",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53212
                        },
                        new
                        {
                            ID = 5,
                            address = "3304 North Pierce Street",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53212
                        },
                        new
                        {
                            ID = 6,
                            address = "3232 North Summit Avenue",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53211
                        },
                        new
                        {
                            ID = 7,
                            address = "3333 North Hacket Avenue",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53211
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("accountID")
                        .HasColumnType("int");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("accountID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            accountID = 1,
                            firstName = "Austin",
                            lastName = "Barry"
                        },
                        new
                        {
                            Id = 2,
                            accountID = 2,
                            firstName = "Andrew",
                            lastName = "Baird"
                        },
                        new
                        {
                            Id = 3,
                            accountID = 3,
                            firstName = "David",
                            lastName = "Steinhafel"
                        },
                        new
                        {
                            Id = 4,
                            accountID = 4,
                            firstName = "Matthew",
                            lastName = "Acker"
                        },
                        new
                        {
                            Id = 5,
                            accountID = 5,
                            firstName = "Ryan",
                            lastName = "Holman"
                        },
                        new
                        {
                            Id = 6,
                            accountID = 6,
                            firstName = "Dejan",
                            lastName = "Tirnanic"
                        },
                        new
                        {
                            Id = 7,
                            accountID = 7,
                            firstName = "Gustavo",
                            lastName = "Sanchez"
                        },
                        new
                        {
                            Id = 8,
                            accountID = 8,
                            firstName = "Jacob",
                            lastName = "Brockmann"
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipcode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            firstName = "Nevin",
                            lastName = "Seibel",
                            zipcode = 53211
                        },
                        new
                        {
                            ID = 2,
                            firstName = "David",
                            lastName = "Lagrange",
                            zipcode = 53212
                        },
                        new
                        {
                            ID = 3,
                            firstName = "Charles",
                            lastName = "King",
                            zipcode = 53168
                        },
                        new
                        {
                            ID = 4,
                            firstName = "Mike",
                            lastName = "Terril",
                            zipcode = 48088
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.PickUp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("pickUpDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PickUps");
                });

            modelBuilder.Entity("ProjectTrash.Models.WeeklyPickUp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("dayOfTheWeek")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WeeklyPickUps");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            dayOfTheWeek = "Monday"
                        },
                        new
                        {
                            ID = 2,
                            dayOfTheWeek = "Tuesday"
                        },
                        new
                        {
                            ID = 3,
                            dayOfTheWeek = "Wednesday"
                        },
                        new
                        {
                            ID = 4,
                            dayOfTheWeek = "Thursday"
                        },
                        new
                        {
                            ID = 5,
                            dayOfTheWeek = "Friday"
                        },
                        new
                        {
                            ID = 6,
                            dayOfTheWeek = "Saturday"
                        },
                        new
                        {
                            ID = 7,
                            dayOfTheWeek = "Sunday"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTrash.Models.Account", b =>
                {
                    b.HasOne("ProjectTrash.Models.AccountSubscription", "AccountSubscription")
                        .WithMany()
                        .HasForeignKey("AccountSubscriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTrash.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTrash.Models.WeeklyPickUp", "WeeklyPickUp")
                        .WithMany()
                        .HasForeignKey("WeeklyPickUpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTrash.Models.Customer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ProjectTrash.Models.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTrash.Models.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProjectTrash.Models.PickUp", b =>
                {
                    b.HasOne("ProjectTrash.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTrash.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
