// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTrash.Data;

namespace ProjectTrash.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200221203459_initial1")]
    partial class initial1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "13579 - customer",
                            ConcurrencyStamp = "3c7f051b-9afe-498c-801c-eb1f9d802094",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "02468 - employee",
                            ConcurrencyStamp = "5f300375-c417-435c-a77c-5f4ff9a33273",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1-Ajpbarry",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63907637-a7a9-472e-b616-dc8437489f80",
                            Email = "Ajpbarry@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "AJPBARRY@GMAIL.COM",
                            NormalizedUserName = "AJPBARRY",
                            PasswordHash = "password",
                            PhoneNumber = "4147370256",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b740c1f5-f9e8-49d9-b6c1-c2340caca1f3",
                            TwoFactorEnabled = true,
                            UserName = "Ajpbarry"
                        },
                        new
                        {
                            Id = "2-ABaird",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6799870-4f48-40f0-a0fa-45f83385bc04",
                            Email = "ABaird@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ABAIRD@GMAIL.COM",
                            NormalizedUserName = "ABAIRD",
                            PasswordHash = "password",
                            PhoneNumber = "4141234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "612f33fe-afec-4661-b1a2-00eae5dec7da",
                            TwoFactorEnabled = true,
                            UserName = "ABaird"
                        },
                        new
                        {
                            Id = "3-DSteinhafel",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc58742f-d424-41f8-bcb2-9de00689c47c",
                            Email = "DSteinhafel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DSTEINHAFEL@GMAIL.COM",
                            NormalizedUserName = "DSTEINHAFEL",
                            PasswordHash = "password",
                            PhoneNumber = "4149876543",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8d3272dd-51d7-48af-a412-51f12d9ba6d0",
                            TwoFactorEnabled = true,
                            UserName = "DSteinhafel"
                        },
                        new
                        {
                            Id = "4-MAcker",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c394d82e-466d-4589-a02c-652fc4ef7f49",
                            Email = "MAcker@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MACKER@GMAIL.COM",
                            NormalizedUserName = "MACKER",
                            PasswordHash = "password",
                            PhoneNumber = "4142345678",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9e8e9108-c146-4a8e-aca3-54103b62a6e6",
                            TwoFactorEnabled = true,
                            UserName = "MAcker"
                        },
                        new
                        {
                            Id = "5-RHolman",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69d01d75-53c7-44d7-b238-41c482d2803f",
                            Email = "RHolman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "RHOLMAN@GMAIL.COM",
                            NormalizedUserName = "RHOLMAN",
                            PasswordHash = "password",
                            PhoneNumber = "4144567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1269d76c-1ad7-41ed-8ca9-d434839ec056",
                            TwoFactorEnabled = true,
                            UserName = "RHolman"
                        },
                        new
                        {
                            Id = "6-DTirnanic",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e35b13b7-b72f-4f39-b749-7cda69a0dd60",
                            Email = "DTirnanic@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DTIRNANIC@GMAIL.COM",
                            NormalizedUserName = "DTIRNANIC",
                            PasswordHash = "password",
                            PhoneNumber = "4140987654",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "897d329b-524a-4341-b2a9-2862897ebedb",
                            TwoFactorEnabled = true,
                            UserName = "DTirnanic"
                        },
                        new
                        {
                            Id = "7-GSanchez",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0824f673-d958-4abb-b2be-95dd51240ca6",
                            Email = "GSanchez@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "GSANCHEZ@GMAIL.COM",
                            NormalizedUserName = "GSANCHEZ",
                            PasswordHash = "password",
                            PhoneNumber = "4146853690",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d19390b9-0740-4beb-af6d-96ccc21bcee7",
                            TwoFactorEnabled = true,
                            UserName = "GSanchez"
                        },
                        new
                        {
                            Id = "8-JBrockman",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9bbbf18-9625-4726-a169-68c016139229",
                            Email = "JBrockman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "JBROCKMAN@GMAIL.COM",
                            NormalizedUserName = "JBROCKMAN",
                            PasswordHash = "password",
                            PhoneNumber = "4148760987",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d793b092-f4a8-46ff-a5ca-a966f53f3d5c",
                            TwoFactorEnabled = true,
                            UserName = "JBrockman"
                        },
                        new
                        {
                            Id = "9-NSeibel",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa06621b-954a-4fb8-a8fe-3e0350501548",
                            Email = "NSeibel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "NSEIBEL@GMAIL.COM",
                            NormalizedUserName = "NSEIBEL",
                            PasswordHash = "password",
                            PhoneNumber = "3138760987",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6303bce4-d0d8-4d41-90f6-9e4b5e438395",
                            TwoFactorEnabled = true,
                            UserName = "NSeibel"
                        },
                        new
                        {
                            Id = "10-DLagrange",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cbd6ec6-8710-48e6-80b9-a168c8b36e62",
                            Email = "DLagrange@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DLAGRANGE@GMAIL.COM",
                            NormalizedUserName = "DLAGRANGE",
                            PasswordHash = "password",
                            PhoneNumber = "3131234567",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c0831ca7-3c9d-48a8-8ef4-4a36dd57dcd9",
                            TwoFactorEnabled = true,
                            UserName = "DLagrange"
                        },
                        new
                        {
                            Id = "11-CKIng",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86d363fe-f783-4953-9569-e074d8f49d33",
                            Email = "CKIng@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CKING@GMAIL.COM",
                            NormalizedUserName = "CKING",
                            PasswordHash = "password",
                            PhoneNumber = "3130865432",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "110c335e-72e0-4969-a3f5-6e73dd15eb4c",
                            TwoFactorEnabled = true,
                            UserName = "CKIng"
                        },
                        new
                        {
                            Id = "12-MTerril",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d872cfef-1c06-496b-96aa-65668ecf9285",
                            Email = "MTerril@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MTERRIL@GMAIL.COM",
                            NormalizedUserName = "MTERRIL",
                            PasswordHash = "password",
                            PhoneNumber = "3136853963",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "eab39bc2-40bd-43cd-ad1e-4529066a199e",
                            TwoFactorEnabled = true,
                            UserName = "MTerril"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1-Ajpbarry",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "2-ABaird",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "3-DSteinhafel",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "4-MAcker",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "5-RHolman",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "6-DTirnanic",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "7-GSanchez",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "8-JBrockman",
                            RoleId = "13579 - customer"
                        },
                        new
                        {
                            UserId = "9-NSeibel",
                            RoleId = "02468 - employee"
                        },
                        new
                        {
                            UserId = "10-DLangrange",
                            RoleId = "02468 - employee"
                        },
                        new
                        {
                            UserId = "11-CKing",
                            RoleId = "02468 - employee"
                        },
                        new
                        {
                            UserId = "12-MTerril",
                            RoleId = "02468 - employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjectTrash.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountSubscriptionID")
                        .HasColumnType("int");

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<int?>("WeeklyPickUpID")
                        .HasColumnType("int");

                    b.Property<double>("balance")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("AccountSubscriptionID");

                    b.HasIndex("AddressID");

                    b.HasIndex("WeeklyPickUpID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountSubscriptionID = 1,
                            AddressID = 1,
                            WeeklyPickUpID = 3,
                            balance = 25.0
                        },
                        new
                        {
                            ID = 2,
                            AccountSubscriptionID = 2,
                            AddressID = 2,
                            WeeklyPickUpID = 4,
                            balance = 50.0
                        },
                        new
                        {
                            ID = 3,
                            AccountSubscriptionID = 3,
                            AddressID = 3,
                            WeeklyPickUpID = 5,
                            balance = 25.0
                        },
                        new
                        {
                            ID = 4,
                            AccountSubscriptionID = 4,
                            AddressID = 4,
                            WeeklyPickUpID = 6,
                            balance = 50.0
                        },
                        new
                        {
                            ID = 5,
                            AccountSubscriptionID = 5,
                            AddressID = 5,
                            WeeklyPickUpID = 1,
                            balance = 0.0
                        },
                        new
                        {
                            ID = 6,
                            AccountSubscriptionID = 6,
                            AddressID = 6,
                            WeeklyPickUpID = 1,
                            balance = 33.0
                        },
                        new
                        {
                            ID = 7,
                            AccountSubscriptionID = 7,
                            AddressID = 7,
                            WeeklyPickUpID = 2,
                            balance = 150.0
                        },
                        new
                        {
                            ID = 8,
                            AccountSubscriptionID = 8,
                            AddressID = 2,
                            WeeklyPickUpID = 1,
                            balance = 20.0
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.AccountSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("accountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("accountStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isSuspended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("suspensionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("suspensionStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            accountEndDate = new DateTime(2016, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2008, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2016, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = true,
                            suspensionEndDate = new DateTime(2020, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2018, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(2019, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            accountEndDate = new DateTime(2016, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2008, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2018, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(2019, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            accountEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            accountStartDate = new DateTime(2018, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true,
                            isSuspended = false,
                            suspensionEndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            suspensionStartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipCode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            address = "14538 Talbot drive",
                            city = "Warren",
                            state = "Mi",
                            zipCode = 48088
                        },
                        new
                        {
                            ID = 2,
                            address = "6228 238th Avenue",
                            city = "Salem",
                            state = "Wi",
                            zipCode = 53168
                        },
                        new
                        {
                            ID = 3,
                            address = "6118 North Downer Avenue",
                            city = "Milwaukee",
                            state = "Wi",
                            zipCode = 53211
                        },
                        new
                        {
                            ID = 4,
                            address = "2438 North Bremen Street",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53212
                        },
                        new
                        {
                            ID = 5,
                            address = "3304 North Pierce Street",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53212
                        },
                        new
                        {
                            ID = 6,
                            address = "3232 North Summit Avenue",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53211
                        },
                        new
                        {
                            ID = 7,
                            address = "3333 North Hacket Avenue",
                            city = "Milwaukee",
                            state = "Wisconsin",
                            zipCode = 53211
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountID = 1,
                            FirstName = "Austin",
                            LastName = "Barry",
                            UserId = "1-Ajpbary"
                        },
                        new
                        {
                            Id = 2,
                            AccountID = 2,
                            FirstName = "Andrew",
                            LastName = "Baird",
                            UserId = "2-ABaird"
                        },
                        new
                        {
                            Id = 3,
                            AccountID = 3,
                            FirstName = "David",
                            LastName = "Steinhafel",
                            UserId = "3-DSteinhafel"
                        },
                        new
                        {
                            Id = 4,
                            AccountID = 4,
                            FirstName = "Matthew",
                            LastName = "Acker",
                            UserId = "4-MAcker"
                        },
                        new
                        {
                            Id = 5,
                            AccountID = 5,
                            FirstName = "Ryan",
                            LastName = "Holman",
                            UserId = "5-RHolman"
                        },
                        new
                        {
                            Id = 6,
                            AccountID = 6,
                            FirstName = "Dejan",
                            LastName = "Tirnanic",
                            UserId = "6-DTirnanic"
                        },
                        new
                        {
                            Id = 7,
                            AccountID = 7,
                            FirstName = "Gustavo",
                            LastName = "Sanchez",
                            UserId = "7-GSanchez"
                        },
                        new
                        {
                            Id = 8,
                            AccountID = 8,
                            FirstName = "Jacob",
                            LastName = "Brockmann",
                            UserId = "8-JBrockmann"
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("zipcode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            UserId = "9-NSeibel",
                            firstName = "Nevin",
                            lastName = "Seibel",
                            zipcode = 53211
                        },
                        new
                        {
                            ID = 2,
                            UserId = "10-DLangrange",
                            firstName = "David",
                            lastName = "Lagrange",
                            zipcode = 53212
                        },
                        new
                        {
                            ID = 3,
                            UserId = "11-CKing",
                            firstName = "Charles",
                            lastName = "King",
                            zipcode = 53168
                        },
                        new
                        {
                            ID = 4,
                            UserId = "12-MTerril",
                            firstName = "Mike",
                            lastName = "Terril",
                            zipcode = 48088
                        });
                });

            modelBuilder.Entity("ProjectTrash.Models.PickUp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("pickUpDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PickUps");
                });

            modelBuilder.Entity("ProjectTrash.Models.WeeklyPickUp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("dayOfTheWeek")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WeeklyPickUps");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            dayOfTheWeek = "Monday"
                        },
                        new
                        {
                            ID = 2,
                            dayOfTheWeek = "Tuesday"
                        },
                        new
                        {
                            ID = 3,
                            dayOfTheWeek = "Wednesday"
                        },
                        new
                        {
                            ID = 4,
                            dayOfTheWeek = "Thursday"
                        },
                        new
                        {
                            ID = 5,
                            dayOfTheWeek = "Friday"
                        },
                        new
                        {
                            ID = 6,
                            dayOfTheWeek = "Saturday"
                        },
                        new
                        {
                            ID = 7,
                            dayOfTheWeek = "Sunday"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTrash.Models.Account", b =>
                {
                    b.HasOne("ProjectTrash.Models.AccountSubscription", "AccountSubscription")
                        .WithMany()
                        .HasForeignKey("AccountSubscriptionID");

                    b.HasOne("ProjectTrash.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("ProjectTrash.Models.WeeklyPickUp", "WeeklyPickUp")
                        .WithMany()
                        .HasForeignKey("WeeklyPickUpID");
                });

            modelBuilder.Entity("ProjectTrash.Models.Customer", b =>
                {
                    b.HasOne("ProjectTrash.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProjectTrash.Models.Employee", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProjectTrash.Models.PickUp", b =>
                {
                    b.HasOne("ProjectTrash.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTrash.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");
                });
#pragma warning restore 612, 618
        }
    }
}
